generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  COACH
  PLAYER
  PARENT
  REFEREE
  PITCH_OWNER
}

enum AgeGroup {
  U15
  U16
  U17
  U18
  Above
}

enum Sport {
  BASEBALL
  BASKETBALL
  CRICKET
  FOOTBALL
  FUTSAL
  HANDBALL
  HOCKEY
  RUGBY
  SOFTBALL
  VOLLEYBALL
  OTHER
}

enum Tier {
  COMMUNITY
  INSTITUTIONS
  ACADEMY
  PROFESSIONAL
  OTHERS
}

model User {
  id           String      @id @default(uuid())
  firstName    String      
  lastName     String     
  email        String      @unique
  password     String
  imageUrl     String?    
  role         Role
  createdAt    DateTime    @default(now()) 
  updatedAt    DateTime    @updatedAt 
  emailVerified Boolean     @default(false)
  // Relations
  pitchOwner   PitchOwner?
  parent       Parent?
  coach        Coach?
  player       Player?
  referee      Referee?
  otps         OTP[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model OTP {
  id      String   @id @default(uuid())
  code    String
  userId  String   @map("user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiry  DateTime

  @@index([userId])
  @@index([expiry])
  @@map("otps")
}
model Coach{
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  coachTeam CoachTeam[]
  @@map("coaches")
}


model CoachTeam {
  coach    Coach @relation(fields: [coachId], references: [id])
  coachId  String 
  team      Team   @relation(fields: [teamId], references: [id])
  teamId    String 
  joinedAt  DateTime @default(now())

  @@id([coachId, teamId])
  @@map("coachTeams")
}
model Team {
  id        String   @id @default(uuid())
  name      String
  teamCode  String   @unique
  players   PlayerTeam[]
  coaches   CoachTeam[]
  ageGroup  AgeGroup
  sport     Sport
  tier      Tier
  location  String?

  @@index([teamCode])
  @@map("teams")
}

model Player {
  id        String   @id @default(uuid())
  userId  String    @unique
  user    User @relation(fields: [userId], references: [id])
  age       Int
  sport     Sport
  imageUrl  String?  
  code      String   @unique
  teams     PlayerTeam[]
  child     Child?

  @@index([code])
  @@map("players")
}

model PlayerTeam {
  player    Player @relation(fields: [playerId], references: [id])
  playerId  String 
  team      Team   @relation(fields: [teamId], references: [id])
  teamId    String 
  joinedAt  DateTime @default(now()) 

  @@id([playerId, teamId])
  @@map("playerTeams")
}



model Parent {
  id       String   @id @default(uuid())
  userId   String   @unique @map("user_id")
  user     User     @relation(fields: [userId], references: [id])
  children Child[]

  @@map("parents")
}

model Child {
  id       String   @id @default(uuid())
  playerId String @unique
  player   Player @relation(fields: [playerId], references: [id])
  parentId String   
  parent   Parent   @relation(fields: [parentId], references: [id])

  @@index([parentId])
  @@map("children")
}

model Referee{
  id           String   @id @default(uuid())
  certification String
  certificates String[]  
  userId  String    @unique
  user    User @relation(fields: [userId], references: [id])

  @@map("referees")
}

model PitchOwner {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])
  verificationDocumentUrl String?  
  facilities             PitchOwnerFacility[]

  @@map("pitchOwners")
}

model PitchOwnerFacility {
  id           String   @id @default(uuid())
  name         String
  address      String
  images       String[] 
  pitchOwnerId String   
  pitchOwner   PitchOwner @relation(fields: [pitchOwnerId], references: [id])

  @@index([pitchOwnerId])
  @@map("pitchOwnerFacilities")
}